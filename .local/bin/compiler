#!/bin/sh

# This script will compile or run another finishing operation on a document. I
# have this script run via vim.

# Compiles .tex. groff (.mom, .ms), .rmd, .md, .org.  Opens .sent files as sent
# presentations. Runs scripts based on extension or shebang.

# Note that .tex files which you wish to compile with XeLaTeX should have the
# string "xelatex" somewhere in a comment/command in the first 5 lines.

file="${1}"
ext="${file##*.}"
dir=$(dirname "${file}") # alternative to the following line
# dir=${file%/*}
base="${file%.*}"

cd "${dir}" || exit "1"

# run sloc on file to get disappointed
tokei "${file}"

case "${ext}" in
	# Try to keep these cases in alphabetical order.
	[0-9]) preconv "${file}" | refer -PS -e | groff -mandoc -T pdf >"${base}.pdf" ;;
	asm) nasm -f elf64 "${file}" && ld -s -o "${base}.out" "${base}.o" && "${base}.out" ;;
	bash) bash "${file}" ;;
	c) cc "${file}" -o "${base}.out" && "${base}.out" ;;
	cpp) g++ "${file}" -o "${base}.out" && "${base}.out" ;;
	cs) mcs "${file}" && mono "${base}.exe" ;;
	csproj) dotnet watch run --project "${file}" ;;
	exs) elixir "${file}" ;;
	f90) gfortran "${file}" -o "${base}.out" && "${base}.out" ;;
	fs) dotnet fsi "${file}" ;;
	fsproj) dotnet run --project "${file}" ;;
	go) go run "${file}" ;;
	h) sudo make install ;;
	html) lynx -width="${4}" -display_charset=utf-8 -dump "${1}" ;;
	hs) ghc -dynamic "${file}" && "${base}" ;;
	ipynb) python "${file%.*}.py" ;; # 'GCBallesteros/jupytext.nvim' will convert to .py
	# java) javac -d classes "${file}" && java -cp classes "${base}" ;; # i prefer to compile manually
	java) java "${file}" ;;
	js) node "${file}" ;;
	lhs) ghc -dynamic "${file}" && "${base}" ;;
	lisp) sbcl --script "${file}" ;;
	lua) lua "${file}" ;;
	m) octave-cli "${file}" ;;
	md)
		# check if file has mermaid code block
		grep -q ':::mermaid' "$file" &&
				mmdc -i "$file" -o "$base.out.md" && file="$base.out.md"
		[ -x "$(command -v lowdown)" ] &&
			lowdown --parse-no-intraemph "${file}" -Tms | groff -mpdfmark -ms -kept -T pdf >"${base}.pdf" ||
		[ -x "$(command -v groffdown)" ] &&
			groffdown -i "${file}" | groff -T pdf >"${base}.pdf" ||
			pandoc_options=""
			# pandoc_options="${pandoc_options} -t ms"
			pandoc_options="${pandoc_options} --highlight-style=tango"
			pandoc_options="${pandoc_options} -V geometry:left=1cm,top=1cm,right=1cm,bottom=2cm"
			# pandoc_options="${pandoc_options} -V geometry:'landscape'"
			# pandoc_options="${pandoc_options} -f markdown-implicit_figures"
			# pandoc_options="${pandoc_options} --pdf-engine=xelatex"
			# pandoc_options="${pandoc_options} --variable mainfont='DejaVu Serif'"
			# pandoc_options="${pandoc_options} --variable sansfont='Noto Sans Mono'"
			pandoc_options="${pandoc_options} -s"
			pandoc "${file}" ${pandoc_options} -o "${base}.pdf"
		;;
	ml) ocaml "${file}" ;;
	mmd) mmdc -i "${file}" -o "${base}.png" ;;
	mom | ms) preconv "${file}" | refer -PS -e | groff -T pdf -m"${ext}" >"${base}.pdf" ;;
	nim) nim compile --run "${file}" ;;
	org) emacs "${file}" --batch -u "${USER}" -f org-latex-export-to-pdf ;;
	p) fpc "${file}" && "${base}" ;;
	pl) perl "${file}" ;;
	php) php "${file}" ;;
	py) python "${file}" ;;
	[rR]) Rscript "${file}" ;;
	[rR]md) Rscript -e "rmarkdown::render('${file}', quiet=TRUE)" ;;
	rs) cargo build && cargo run ;;
	sass) sassc -a "${file}" "${base}.css" ;;
	scad) openscad -o "${base}.stl" "${file}" ;;
	scala) scala "${file}" ;;
	sent) setsid -f sent "${file}" 2>"/dev/null" ;;
	sh) sh "${file}" ;;
	sql) rm -f "${base}.tmp.db" && sqlite3 "${base}.tmp.db" <"${file}" ;;
	tex)
		textarget="$(getcomproot "${file}" || echo "${file}")"
		command="pdflatex"
		head -n5 "${textarget}" | grep -qi "xelatex" && command="xelatex"
		${command} --output-directory="${textarget%/*}" "${textarget%.*}" &&
			grep -qi addbibresource "${textarget}" &&
			biber --input-directory "${textarget%/*}" "${textarget%.*}" &&
			${command} --output-directory="${textarget%/*}" "${textarget%.*}" &&
			${command} --output-directory="${textarget%/*}" "${textarget%.*}"
		;;
	ts) tsc "${file}" && node "${base}.js" ;;
	uml) plantuml "${file}" ;;
	zig) zig run "${file}" ;;
	*) sed -n '/^#!/s/^#!//p; q' "${file}" | xargs -r -I % "${file}" ;;
esac
